var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/getting-started/",title:"Getting started",description:"",content:""}),e.add({id:1,href:"/docs/getting-started/overview/",title:"Overview",description:`Welcome to Sharkey\u0026rsquo;s documentation!
Sharkey is a Misskey fork following upstream changes when possible, with added features. Like any other ActivityPub software Sharkey can interface with the thousands of servers that form the fediverse, an interconnected social network, working in tandem with software such as Akkoma, Mastodon, Pixelfed and many more.
Have you heard of Sharkey, but you\u0026rsquo;re not sure how it differs from Misskey? Go to the comparison page.`,content:`Welcome to Sharkey\u0026rsquo;s documentation!
Sharkey is a Misskey fork following upstream changes when possible, with added features. Like any other ActivityPub software Sharkey can interface with the thousands of servers that form the fediverse, an interconnected social network, working in tandem with software such as Akkoma, Mastodon, Pixelfed and many more.
Have you heard of Sharkey, but you\u0026rsquo;re not sure how it differs from Misskey? Go to the comparison page.
Do you want to find an instance running Sharkey, and create an account there? Go to our directory site.
Do you want to install Sharkey? Go to the \u0026ldquo;Fresh Install\u0026rdquo; instructions.
Are you running a Misskey or Firefish instance, and want to migrate to Sharkey? Go the migration instructions.
Have you just started using Sharkey, and are confused? Try the FAQs.
`}),e.add({id:2,href:"/docs/install/",title:"Install",description:"",content:""}),e.add({id:3,href:"/docs/install/fresh/",title:"Fresh Installation",description:`Before you start, you really need:
an always-on machine that can receive connections from the Internet a domain name to dedicate to your Sharkey instance, resolving to the address(es) of that machine a web server running on that machine, with valid TLS certificates for the domain name With Docker #Prerequisites:
Docker Compose Plugin Create multiple directories:
mkdir Sharkey \u0026amp;\u0026amp; mkdir Sharkey/.config Fetch all required examples and enter directory:
wget -O Sharkey/docker-compose.`,content:`Before you start, you really need:
an always-on machine that can receive connections from the Internet a domain name to dedicate to your Sharkey instance, resolving to the address(es) of that machine a web server running on that machine, with valid TLS certificates for the domain name With Docker #Prerequisites:
Docker Compose Plugin Create multiple directories:
mkdir Sharkey \u0026amp;\u0026amp; mkdir Sharkey/.config Fetch all required examples and enter directory:
wget -O Sharkey/docker-compose.yml https://raw.githubusercontent.com/transfem-org/Sharkey/stable/docker-compose.yml.example wget -O Sharkey/.config/default.yml https://raw.githubusercontent.com/transfem-org/Sharkey/stable/.config/example.yml wget -O Sharkey/.config/docker.env https://raw.githubusercontent.com/transfem-org/Sharkey/stable/.config/docker_example.env cd Sharkey Edit .config/default.yml, there are comments explaining what each option means. In particular, we\u0026rsquo;re going to assume you have:
url: https://{YOUR DOMAIN NAME}/ (replace {YOUR DOMAIN NAME} with the domain name we talked about at the start).
Edit docker-compose.yml, there are multiple comments there as well. If you want to set up note search with meilisearch, uncomment all of meilisearch options, otherwise proceed to do the following changes in the services: / web: section:
uncomment the line that starts with image: remove the line build: . Starting:
docker compose up -d Manually #Same as Misskey.
Prerequisites:
NodeJS version 20.4 or later, with both npm and pnpm installed (corepack enable should suffice, make sure you run it as root if you\u0026rsquo;re using your system NodeJS) PostgreSQL version 15 or later Redis FFmpeg all the various packages to compile and build C code, and Python (on Debian-style systems, that\u0026rsquo;s build-essential \u0026amp; python) Create a sharkey user:
adduser --disabled-password --disabled-login sharkey start a shell as that user:
sudo -u sharkey -i (or something like that), then:
git clone --recurse-submodules -b stable https://github.com/transfem-org/Sharkey.git cd Sharkey pnpm install --frozen-lockfile cp .config/example.yml .config/default.yml Edit .config/default.yml, there are comments explaining what each option means. In particular, we\u0026rsquo;re going to assume you have:
url: https://{YOUR DOMAIN NAME}/ db: host: localhost port: 5432 db: sharkey user: sharkey pass: {YOUR PASSWORD} (replace {YOUR PASSWORD} with an actual password you make up for this, and {YOUR DOMAIN NAME} with the domain name we talked about at the start)
Building:
pnpm run build Create the PostgreSQL user and database, either with createuser and createdb or with sudo -u postgres psql and then:
CREATE DATABASE sharkey WITH ENCODING = 'UTF8'; CREATE USER sharkey WITH ENCRYPTED PASSWORD '{YOUR_PASSWORD}'; GRANT ALL PRIVILEGES ON DATABASE sharkey TO sharkey; ALTER DATABASE sharkey OWNER TO sharkey; \\q (replace {YOUR PASSWORD} with the same password as before)
Then create the schema:
pnpm run init And start it:
pnpm start you should see a series of colourful lines, ending with something like:
Now listening on port 3000 on https://example.tld but with a different URL at the end (you did change the url setting in the config file, right?). Stop that process (control-C is enough), and set up a system service for Sharkey.
With systemd #Create a file /etc/systemd/system/sharkey.service containing:
[Unit] Description=Sharkey daemon [Service] Type=simple User=sharkey ExecStart=/usr/bin/pnpm start WorkingDirectory=/home/sharkey/Sharkey Environment=\u0026quot;NODE_OPTIONS=--max-old-space-size=8192\u0026quot; Environment=\u0026quot;NODE_ENV=production\u0026quot; TimeoutSec=60 StandardOutput=journal StandardError=journal SyslogIdentifier=sharkey Restart=always [Install] WantedBy=multi-user.target (you may need to change that /usr/bin/pnpm if you\u0026rsquo;re not using your system NodeJS).
Then:
sudo systemctl daemon-reload sudo systemctl enable sharkey sudo systemctl start sharkey After that, systemctl status sharkey should show that it\u0026rsquo;s running.
With OpenRC #Create a file /etc/init.d/sharkey containing:
#!/sbin/openrc-run name=sharkey description=\u0026quot;Sharkey daemon\u0026quot; command=\u0026quot;/usr/bin/pnpm\u0026quot; command_args=\u0026quot;start\u0026quot; command_user=\u0026quot;sharkey\u0026quot; supervisor=\u0026quot;supervise-daemon\u0026quot; supervise_daemon_args=\u0026quot; -d /home/sharkey/Sharkey -e NODE_ENV=production -e \\\u0026quot;NODE_OPTIONS=--max-old-space-size=8192\\\u0026quot;\u0026quot; pidfile=\u0026quot;/run/\${RC_SVCNAME}.pid\u0026quot; depend() { need net use logger nginx } (you may need to change that /usr/bin/pnpm if you\u0026rsquo;re not using your system NodeJS).
Then:
sudo rc-update add sharkey sudo rc-service sharkey start After that, rc-service sharkey status should show that it\u0026rsquo;s running.
Configure the web server #NGINX #See Misskey\u0026rsquo;s instructions
Update Sharkey #Very similar to the installation process:
sudo -u sharkey -i cd Sharkey git checkout stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then restart the service (sudo systemctl restart sharkey or rc-service sharkey restart).
If there\u0026rsquo;s problems with updating, you can run pnpm run clean and/or pnpm run clean-all which will remove all the effects of a previous build, then you can install+build+migrate+restart again.
`}),e.add({id:4,href:"/docs/install/migrate/",title:"Migrating from another software",description:`From Misskey #Let\u0026rsquo;s say you have a working Misskey, running as user misskey from /home/misskey/misskey.
Migrating to Sharkey is the same as updating to a newer Misskey version:
sudo -u misskey -i cd misskey git remote rename origin misskey git remote add origin https://github.com/transfem-org/Sharkey.git git remote update -p git checkout -b stable --track origin/stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then you can restart your service.`,content:`From Misskey #Let\u0026rsquo;s say you have a working Misskey, running as user misskey from /home/misskey/misskey.
Migrating to Sharkey is the same as updating to a newer Misskey version:
sudo -u misskey -i cd misskey git remote rename origin misskey git remote add origin https://github.com/transfem-org/Sharkey.git git remote update -p git checkout -b stable --track origin/stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then you can restart your service.
If you see weirdness like service not starting, or missing labels in the web UI, you should first make sure the build worked (check all the error messages!), then try building again from scratch:
pnpm run clean-all pnpm install --frozen-lockfile pnpm run build pnpm run migrate Also, clear your browser\u0026rsquo;s cache and local storage (this will log your browser out of Misskey/Sharkey).
Using Docker #If you are using the docker-compose.yml file from Misskey which builds locally follow these steps:
git remote rename origin misskey git remote add origin https://github.com/transfem-org/Sharkey.git git remote update -p git checkout -b stable --track origin/stable git pull --recurse-submodules pnpm install --frozen-lockfile sudo docker compose build From Firefish #This guide was only tested on a Firefish 1.0.5-RC instance: other versions and instances may differ quite a lot from the one we used, esspecially if you have custom patches applied.
If any of the steps fails, especially SQL queries, seek help from us via Matrix or Discord. Do not try fixing things in the DB yourself unless you really know what you are doing.
Before you begin, please take a backup of your database. While you\u0026rsquo;re there, make sure you know how to restore from that backup! Using the plain format for pg_dump is probably the simplest way.
It\u0026rsquo;s a good idea to have a separate backup of your list of silenced instances and of your user table.
Using Docker #Stop / shut down the entire stack: PostgreSQL, Redis / KeyDB / DragonflyDB, Sonic / ElasticSearch / MeiliSearch, Firefish itself. Stop all of it.
Edit you docker compose and replace the Firefish image with ghcr.io/transfem-org/sharkey:stable
If you use Sonic or ElasticSearch replace that section of the Docker Compose with the following, as Sharkey currently only supports meilisearch:
meilisearch: restart: always image: getmeili/meilisearch:v1.3.4 environment: - MEILI_NO_ANALYTICS=true - MEILI_ENV=production env_file: - .config/meilisearch.env networks: - calcnet # \u0026lt;-- Use whatever network name is used in the docker compose here volumes: - ./meili_data:/meili_data # \u0026lt;--- make sure to replace the volume with one that fits your existing docker compose If you use DragonflyDB replace it with Redis or KeyDB, as Sharkey currently does not support DragonflyDB. To do this replace the section in the docker compose with the following:
redis: restart: always image: redis:7-alpine networks: - calcnet # \u0026lt;-- Use whatever network name is used in the docker compose here volumes: - ./redis:/data # \u0026lt;-- Make sure to replace the volume with the one used in your firefish docker compose healthcheck: test: \u0026quot;redis-cli ping\u0026quot; interval: 5s retries: 20 Backup your firefish config and replace it with the default sharkey one
Edit the config inline with your instance settings. Make sure to use the same db \u0026amp; redis settings as in your Firefish config.
Now is the time to backup your database and Redis volumes!
Firefish\u0026rsquo;s docker-compose uses PostgreSQL version 12. We strongly recommend upgrading to 15 or 16. You can do this by making a new db volume, starting the newer PostgreSQL on it, and importing the data from the backup you just made. Refer to the PostgreSQL documentation.
Make sure to update the mount paths for volumes of the Sharkey container from /firefish/ to /sharkey/ (so your existing volumes will show up at the new path, inside the container).
Now start only the database with docker compose up -d db (instead of db, you may need to use whatever name is set for the service in your docker compose config), and start a psql shell with docker exec -it db psql -U firefish -d firefish (replace db as before, and -U firefish -d firefish with the database user and database name, respectively, if they\u0026rsquo;re different from firefish).
You should now be connected to your Firefish database. We need to massage it into shape so that Sharkey database migrations will work. The following series of SQL queries / commands should do it, but please read the comments and pay attention to the results after each query!
-- start a transaction, so we won't leave the db in a halfway state if -- things go wrong BEGIN; -- we need to add back some columns that Firefish removed, but that -- Sharkey migrations expect ALTER TABLE \u0026quot;user_profile\u0026quot; ADD \u0026quot;integrations\u0026quot; JSONB NOT NULL DEFAULT '{}'; ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;twitterConsumerSecret\u0026quot; VARCHAR(128); ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;twitterConsumerKey\u0026quot; VARCHAR(128); ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;enableTwitterIntegration\u0026quot; BOOLEAN NOT NULL DEFAULT false; ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;enableGithubIntegration\u0026quot; BOOLEAN NOT NULL DEFAULT false; ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;githubClientId\u0026quot; VARCHAR(128); ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;githubClientSecret\u0026quot; VARCHAR(128); ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;enableDiscordIntegration\u0026quot; BOOLEAN NOT NULL DEFAULT false; ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;discordClientId\u0026quot; VARCHAR(128); ALTER TABLE \u0026quot;meta\u0026quot; ADD \u0026quot;discordClientSecret\u0026quot; VARCHAR(128); -- also an extra table, for the same reasons CREATE TABLE antenna_note(); -- move aside some FireFish columns; Sharkey migrations will -- re-create them; we don't \`DROP\` them because we want to keep the data ALTER TABLE \u0026quot;user\u0026quot; RENAME COLUMN \u0026quot;movedToUri\u0026quot; TO \u0026quot;ff_movedToUri\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; RENAME COLUMN \u0026quot;alsoKnownAs\u0026quot; TO \u0026quot;ff_alsoKnownAs\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; RENAME COLUMN \u0026quot;isIndexable\u0026quot; TO \u0026quot;ff_isIndexable\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; RENAME COLUMN \u0026quot;speakAsCat\u0026quot; TO \u0026quot;ff_speakAsCat\u0026quot;; ALTER TABLE \u0026quot;user_profile\u0026quot; RENAME COLUMN \u0026quot;preventAiLearning\u0026quot; TO \u0026quot;ff_preventAiLearning\u0026quot;; ALTER TABLE \u0026quot;meta\u0026quot; RENAME COLUMN \u0026quot;silencedHosts\u0026quot; TO \u0026quot;ff_silencedHosts\u0026quot;; -- this column was added by both Firefish and Misskey, but with -- different names, let's fix it ALTER TABLE \u0026quot;meta\u0026quot; RENAME COLUMN \u0026quot;ToSUrl\u0026quot; TO \u0026quot;termsOfServiceUrl\u0026quot;; -- update antenna types, this is only needed on some instances but -- recommend to run anyway -- -- this *removes* any antennas of types not supported by Sharkey! CREATE TYPE public.new_antenna_src_enum AS ENUM ('home', 'all', 'list'); ALTER TABLE antenna ADD COLUMN new_src public.new_antenna_src_enum; DELETE FROM antenna WHERE src NOT IN ('home', 'all', 'list'); ALTER TABLE antenna DROP COLUMN src; ALTER TABLE antenna RENAME COLUMN new_src TO src; DROP TYPE public.antenna_src_enum; ALTER TYPE new_antenna_src_enum RENAME TO antenna_src_enum; -- optional but recommended: delete all empty moderation log entries DELETE FROM moderation_log WHERE info = '{}'; -- only needed on some instances, run this if -- \`\\dT+ user_profile_mutingnotificationtypes_enum\` -- does not show \`note\` in the \u0026quot;elements\u0026quot; section ALTER TYPE \u0026quot;public\u0026quot;.\u0026quot;user_profile_mutingnotificationtypes_enum\u0026quot; ADD VALUE 'note'; If everything worked and you saw no errors, you can run COMMIT; in that same psql shell, to commit all the changes, then close that shell. Again, if anything went wrong, come talk to us on Matrix or Discord!
Start Sharkey, and let it run all its migrations. Once that\u0026rsquo;s done, and Starkey says it\u0026rsquo;s listening, stop Sharkey but keep the database running.
Open another psql shell like before (docker exec -it db psql -U firefish -d firefish, replacing things as before). We need another small pass of massaging.
BEGIN; -- all existing users are approved, because Firefish doesn't have a -- concept of approvals UPDATE \u0026quot;user\u0026quot; SET approved = true; -- now we put back the data we moved aside UPDATE \u0026quot;user\u0026quot; SET \u0026quot;movedToUri\u0026quot; = \u0026quot;ff_movedToUri\u0026quot; WHERE \u0026quot;ff_movedToUri\u0026quot; IS NOT NULL; UPDATE \u0026quot;user\u0026quot; SET \u0026quot;alsoKnownAs\u0026quot; = \u0026quot;ff_alsoKnownAs\u0026quot; WHERE \u0026quot;ff_alsoKnownAs\u0026quot; IS NOT NULL; UPDATE \u0026quot;user\u0026quot; SET \u0026quot;noindex\u0026quot; = NOT (COALESCE(\u0026quot;ff_isIndexable\u0026quot;, true)); UPDATE \u0026quot;user\u0026quot; SET \u0026quot;speakAsCat\u0026quot; = COALESCE(\u0026quot;ff_speakAsCat\u0026quot;, false); UPDATE \u0026quot;user_profile\u0026quot; SET \u0026quot;preventAiLearning\u0026quot; = COALESCE(\u0026quot;ff_preventAiLearning\u0026quot;, true); UPDATE \u0026quot;meta\u0026quot; SET \u0026quot;silencedHosts\u0026quot; = COALESCE(\u0026quot;ff_silencedHosts\u0026quot;,'{}'); ALTER TABLE \u0026quot;user\u0026quot; DROP COLUMN \u0026quot;ff_movedToUri\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; DROP COLUMN \u0026quot;ff_alsoKnownAs\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; DROP COLUMN \u0026quot;ff_isIndexable\u0026quot;; ALTER TABLE \u0026quot;user\u0026quot; DROP COLUMN \u0026quot;ff_speakAsCat\u0026quot;; ALTER TABLE \u0026quot;user_profile\u0026quot; DROP COLUMN \u0026quot;ff_preventAiLearning\u0026quot;; ALTER TABLE \u0026quot;meta\u0026quot; DROP COLUMN \u0026quot;ff_silencedHosts\u0026quot;; If everything worked and you saw no errors, you can run COMMIT; in that same psql shell, to commit all the changes, then close that shell. Again, if anything went wrong, come talk to us on Matrix or Discord!
Start everything up again, you should see no errors in the logs.
Log in as an administrator, and go to the control panel. If you use an object store such as S3, double-check your settings (it\u0026rsquo;s possible, for example, that the URL now looks like https://https://yourdomain.com, fix it). If you want your users to be able to search notes, you must enable it via the \u0026ldquo;roles\u0026rdquo; system.
Congratulations, you\u0026rsquo;re now running Sharkey!
`}),e.add({id:5,href:"/docs/comparsion/",title:"Comparsion",description:"",content:""}),e.add({id:6,href:"/docs/comparsion/misskey/",title:"Sharkey vs Misskey",description:`A (probably comprehensive) list of differences #Big ones #fully federated note editing, you can also see previous versions of edited notes Mastodon-compatible API, including OAuth2 can import your exported posts from Mastodon and most of its forks, Pleroma / Akkoma, Misskey / Firefish and forks, Twitter, Instagram, Facebook, including attachments (threading may not work perfectly, and other people\u0026rsquo;s replies to your posts may not get imported) admins can require approval for new users\u0026rsquo; signups admins can silence users admins can mark all of a user\u0026rsquo;s media as NSFW GDPR-style Data Subject Access Requests (users can export all data related to themselves) Fun ones #can play module / tracker music files (federated) listenbrainz integration (federated) background image on user profiles \u0026ldquo;speak as cat\u0026rdquo; separate from \u0026ldquo;is a cat\u0026rdquo; (both setting are federated with compatible software) UI/UX #option to open a note\u0026rsquo;s detailed view by clicking on the note (most useful on mobile) images lacking alt text are marked as such UI elements can be round (as in Misskey) or square-ish \u0026ldquo;sign out\u0026rdquo; button in user menu user profile page has \u0026ldquo;notes\u0026rdquo; / \u0026ldquo;all\u0026rdquo; / \u0026ldquo;including files\u0026rdquo; tabs attachments can be collapsed by default buttons to show/hide all notes with CWs in a conversation one-button \u0026ldquo;like\u0026rdquo; (plus custom reactions on a separate button) animated MFM can be enabled/disabled on each note supports longer alt text pop-up user profiles show if follow requests to the user require approval, have a \u0026ldquo;open remote profile\u0026rdquo; option, and show custom fields (e.`,content:`A (probably comprehensive) list of differences #Big ones #fully federated note editing, you can also see previous versions of edited notes Mastodon-compatible API, including OAuth2 can import your exported posts from Mastodon and most of its forks, Pleroma / Akkoma, Misskey / Firefish and forks, Twitter, Instagram, Facebook, including attachments (threading may not work perfectly, and other people\u0026rsquo;s replies to your posts may not get imported) admins can require approval for new users\u0026rsquo; signups admins can silence users admins can mark all of a user\u0026rsquo;s media as NSFW GDPR-style Data Subject Access Requests (users can export all data related to themselves) Fun ones #can play module / tracker music files (federated) listenbrainz integration (federated) background image on user profiles \u0026ldquo;speak as cat\u0026rdquo; separate from \u0026ldquo;is a cat\u0026rdquo; (both setting are federated with compatible software) UI/UX #option to open a note\u0026rsquo;s detailed view by clicking on the note (most useful on mobile) images lacking alt text are marked as such UI elements can be round (as in Misskey) or square-ish \u0026ldquo;sign out\u0026rdquo; button in user menu user profile page has \u0026ldquo;notes\u0026rdquo; / \u0026ldquo;all\u0026rdquo; / \u0026ldquo;including files\u0026rdquo; tabs attachments can be collapsed by default buttons to show/hide all notes with CWs in a conversation one-button \u0026ldquo;like\u0026rdquo; (plus custom reactions on a separate button) animated MFM can be enabled/disabled on each note supports longer alt text pop-up user profiles show if follow requests to the user require approval, have a \u0026ldquo;open remote profile\u0026rdquo; option, and show custom fields (e.g. the user\u0026rsquo;s website address) MFM cheatsheet when composing notes emoji auto-complete is case-insensitive it\u0026rsquo;s always clear if a note has a poll (misskey sometimes hides that) multiple-choice polls are clearly marked as such boosts and quote-boost are accounted separately only 1 boost per note per user is allowed admins can remove bots from \u0026ldquo;trending\u0026rdquo; users can hide bots from their timelines translatable notes are shown translated regardless of where they\u0026rsquo;re shown (e.g. when quoted, or when looking at their replies) when searching, users can restrict results to notes with attachments CSS class names are human-readable, to simplify browser-side customisation users can disable indexing of their notes (the setting is federated) \u0026ldquo;likes\u0026rdquo; and \u0026ldquo;reactions\u0026rdquo; federate correctly to Mastodon / Pleroma / Akkoma (Misskey sends them all as reactions) different error icons users can disable the \u0026ldquo;disconnected\u0026rdquo; warning (connection is usually re-established automatically, so the warning is rarely useful) users can set a default emoji for their likes/reactions when the instance is using meilisearch to index notes, Sharkey will use it in more cases (e.g. when limiting results to notes containing images) when showing a reply containing many mentions, they are shortened there\u0026rsquo;s a search widget Ones of interest to admins #quote-boosts federate correctly from/to Mastodon forks the not-very-functional \u0026ldquo;automatically mark attachments as NSFW\u0026rdquo; has been removed (smaller installation, faster image/video uploads) argon2 instead of bcrypt for hashing users\u0026rsquo; secrets admins can delete remote emojis admins can disable achievements admins can refresh remote user details admins can set a default emoji for likes/reactions the PWA icon matches the instance icon deleted custom emoji are automatically removed from Drive `}),e.add({id:7,href:"/docs/install/faqs/",title:"FAQs",description:`How do I enable note search? #You use the \u0026ldquo;roles\u0026rdquo; system. Log in as administrator, go to the \u0026ldquo;control panel\u0026rdquo;, select the \u0026ldquo;roles\u0026rdquo; section (under \u0026ldquo;management\u0026rdquo;). Then either expand the \u0026ldquo;role template\u0026rdquo; (if you want to give every user access to search) or create a new role (if you want to give access to only some users), then change the \u0026ldquo;Usage of note search\u0026rdquo; setting.
How do I give my users more Drive space?`,content:`How do I enable note search? #You use the \u0026ldquo;roles\u0026rdquo; system. Log in as administrator, go to the \u0026ldquo;control panel\u0026rdquo;, select the \u0026ldquo;roles\u0026rdquo; section (under \u0026ldquo;management\u0026rdquo;). Then either expand the \u0026ldquo;role template\u0026rdquo; (if you want to give every user access to search) or create a new role (if you want to give access to only some users), then change the \u0026ldquo;Usage of note search\u0026rdquo; setting.
How do I give my users more Drive space? #You use the \u0026ldquo;roles\u0026rdquo; system. Log in as administrator, go to the \u0026ldquo;control panel\u0026rdquo;, select the \u0026ldquo;roles\u0026rdquo; section (under \u0026ldquo;management\u0026rdquo;). Then either expand the \u0026ldquo;role template\u0026rdquo; (if you want to give every user the same amount space) or create a new role (if you want to give different amounts of space to different users), then change the \u0026ldquo;Drive capacity\u0026rdquo; setting.
How do I enable push notifications for the web interface? #First of all, you need to generate a pair of so-called \u0026ldquo;VAPID\u0026rdquo; keys.
One way to do that is, from your Sharkey directory (git clone, or inside the Docker image):
./packages/backend/node_modules/.bin/web-push generate-vapid-keys Alternatively, you can use an online generator.
Once you have that public and private keys, log in as administrator, go to the \u0026ldquo;control panel\u0026rdquo;, select the \u0026ldquo;general\u0026rdquo; section (under \u0026ldquo;settings\u0026rdquo;), scroll to the \u0026ldquo;ServiceWorker\u0026rdquo; bit, enter both keys, and enable the \u0026ldquo;Enable Push-Notifications for your Browser\u0026rdquo; toggle.
`}),e.add({id:8,href:"/docs/",title:"Docs",description:"Docs.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()