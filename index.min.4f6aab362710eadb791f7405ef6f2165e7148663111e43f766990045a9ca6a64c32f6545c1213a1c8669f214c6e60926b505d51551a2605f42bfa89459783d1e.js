var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/install/",title:"Install",description:"",content:""}),e.add({id:1,href:"/docs/install/fresh/",title:"Fresh Installation",description:`Before you start, you really need:
an always-on machine that can receive connections from the Internet a domain name to dedicate to your Sharkey instance, resolving to the address(es) of that machine a web server running on that machine, with valid TLS certificates for the domain name With Docker #Prerequisites:
Docker Compose Plugin Create multiple directories:
mkdir Sharkey \u0026amp;\u0026amp; mkdir Sharkey/.config Fetch all required examples and enter directory:
wget -O Sharkey/docker-compose.`,content:`Before you start, you really need:
an always-on machine that can receive connections from the Internet a domain name to dedicate to your Sharkey instance, resolving to the address(es) of that machine a web server running on that machine, with valid TLS certificates for the domain name With Docker #Prerequisites:
Docker Compose Plugin Create multiple directories:
mkdir Sharkey \u0026amp;\u0026amp; mkdir Sharkey/.config Fetch all required examples and enter directory:
wget -O Sharkey/docker-compose.yml https://raw.githubusercontent.com/transfem-org/Sharkey/stable/docker-compose.yml.example wget -O Sharkey/.config/default.yml https://raw.githubusercontent.com/transfem-org/Sharkey/stable/.config/example.yml wget -O Sharkey/.config/docker.env https://raw.githubusercontent.com/transfem-org/Sharkey/stable/.config/docker_example.env cd Sharkey Edit .config/default.yml, there are comments explaining what each option means. In particular, we\u0026rsquo;re going to assume you have:
url: https://{YOUR DOMAIN NAME}/ (replace {YOUR DOMAIN NAME} with the domain name we talked about at the start).
Edit docker-compose.yml, there are multiple comments there as well. If you want to set up note search with meilisearch, uncomment all of meilisearch options, otherwise proceed to do the following changes in the services: / web: section:
uncomment the line that starts with image: remove the line build: . Starting:
docker compose up -d Manually #Same as Misskey.
Prerequisites:
NodeJS version 20.4 or later, with both npm and pnpm installed (corepack enable should suffice, make sure you run it as root if you\u0026rsquo;re using your system NodeJS) PostgreSQL version 15 or later Redis FFmpeg all the various packages to compile and build C code, and Python (on Debian-style systems, that\u0026rsquo;s build-essential \u0026amp; python) Create a sharkey user:
adduser --disabled-password --disabled-login sharkey start a shell as that user:
sudo -u sharkey -i (or something like that), then:
git clone --recurse-submodules -b stable https://github.com/transfem-org/Sharkey.git cd Sharkey pnpm install --frozen-lockfile cp .config/example.yml .config/default.yml Edit .config/default.yml, there are comments explaining what each option means. In particular, we\u0026rsquo;re going to assume you have:
url: https://{YOUR DOMAIN NAME}/ db: host: localhost port: 5432 db: sharkey user: sharkey pass: {YOUR PASSWORD} (replace {YOUR PASSWORD} with an actual password you make up for this, and {YOUR DOMAIN NAME} with the domain name we talked about at the start)
Building:
pnpm run build Create the PostgreSQL user and database, either with createuser and createdb or with sudo -u postgres psql and then:
create database sharkey with encoding = 'UTF8'; create user sharkey with encrypted password '{YOUR_PASSWORD}'; grant all privileges on database sharkey to sharkey; alter database sharkey owner to sharkey; \\q (replace {YOUR PASSWORD} with the same password as before)
Then create the schema:
pnpm run init And start it:
pnpm start you should see a series of colourful lines, ending with something like:
Now listening on port 3000 on https://example.tld but with a different URL at the end (you did change the url setting in the config file, right?). Stop that process (control-C is enough), and set up a system service for Sharkey.
With systemd #Create a file /etc/systemd/system/sharkey.service containing:
[Unit] Description=Sharkey daemon [Service] Type=simple User=sharkey ExecStart=/usr/bin/pnpm start WorkingDirectory=/home/sharkey/Sharkey Environment=\u0026quot;NODE_OPTIONS=--max-old-space-size=8192\u0026quot; Environment=\u0026quot;NODE_ENV=production\u0026quot; TimeoutSec=60 StandardOutput=journal StandardError=journal SyslogIdentifier=sharkey Restart=always [Install] WantedBy=multi-user.target (you may need to change that /usr/bin/pnpm if you\u0026rsquo;re not using your system NodeJS).
Then:
sudo systemctl daemon-reload sudo systemctl enable sharkey sudo systemctl start sharkey After that, systemctl status sharkey should show that it\u0026rsquo;s running.
With OpenRC #Create a file /etc/init.d/sharkey containing:
#!/sbin/openrc-run name=sharkey description=\u0026quot;Sharkey daemon\u0026quot; command=\u0026quot;/usr/bin/pnpm\u0026quot; command_args=\u0026quot;start\u0026quot; command_user=\u0026quot;sharkey\u0026quot; supervisor=\u0026quot;supervise-daemon\u0026quot; supervise_daemon_args=\u0026quot; -d /home/sharkey/Sharkey -e NODE_ENV=production -e \\\u0026quot;NODE_OPTIONS=--max-old-space-size=8192\\\u0026quot; pidfile=\u0026quot;/run/\${RC_SVCNAME}.pid\u0026quot; depend() { need net use logger nginx } (you may need to change that /usr/bin/pnpm if you\u0026rsquo;re not using your system NodeJS).
Then:
sudo rc-update add sharkey sudo rc-service sharkey start After that, rc-service sharkey status should show that it\u0026rsquo;s running.
Configure the web server #NGINX #See Misskey\u0026rsquo;s instructions
Update Sharkey #Very similar to the installation process:
sudo -u sharkey -i cd Sharkey git checkout stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then restart the service (sudo systemctl restart sharkey or rc-service sharkey restart).
If there\u0026rsquo;s problems with updating, you can run pnpm run clean and/or pnpm run clean-all which will remove all the effects of a previous build, then you can install+build+migrate+restart again.
`}),e.add({id:2,href:"/docs/install/migrate/",title:"Migrating from another software",description:`From Misskey #Let\u0026rsquo;s say you have a working Misskey, running as user misskey from /home/misskey/misskey.
Migrating to Sharkey is the same as updating to a newer Misskey version:
sudo -u misskey -i cd misskey git remote rename origin misskey git remote add origin https://github.com/transfem-org/Sharkey.git git remote update -p git checkout -b stable --track origin/stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then you can restart your service.`,content:`From Misskey #Let\u0026rsquo;s say you have a working Misskey, running as user misskey from /home/misskey/misskey.
Migrating to Sharkey is the same as updating to a newer Misskey version:
sudo -u misskey -i cd misskey git remote rename origin misskey git remote add origin https://github.com/transfem-org/Sharkey.git git remote update -p git checkout -b stable --track origin/stable git pull --recurse-submodules pnpm install --frozen-lockfile pnpm run build pnpm run migrate Then you can restart your service.
If you see weirdness like service not starting, or missing labels in the web UI, you should first make sure the build worked (check all the error messages!), then try building again from scratch:
pnpm run clean-all pnpm install --frozen-lockfile pnpm run build pnpm run migrate Also, clear your browser\u0026rsquo;s cache and local storage (this will log your browser out of Misskey/Sharkey).
From Firefish #(someone please write this)
`}),e.add({id:3,href:"/docs/comparsion/",title:"Comparsion",description:"",content:""}),e.add({id:4,href:"/docs/comparsion/misskey/",title:"Sharkey vs Misskey",description:`A (probably comprehensive) list of differences #Big ones #fully federated note editing, you can also see previous versions of edited notes Mastodon-compatible API, including OAuth2 can import your exported posts from Mastodon and most of its forks, Pleroma / Akkoma, Misskey / Firefish and forks, Twitter, Instagram, Facebook, including attachments (threading may not work perfectly, and other people\u0026rsquo;s replies to your posts may not get imported) admins can require approval for new users\u0026rsquo; signups admins can silence users admins can mark all of a user\u0026rsquo;s media as NSFW GDPR-style Data Subject Access Requests (users can export all data related to themselves) Fun ones #can play module / tracker music files (federated) listenbrainz integration (federated) background image on user profiles \u0026ldquo;speak as cat\u0026rdquo; separate from \u0026ldquo;is a cat\u0026rdquo; (both setting are federated with compatible software) UI/UX #option to open a note\u0026rsquo;s detailed view by clicking on the note (most useful on mobile) images lacking alt text are marked as such UI elements can be round (as in Misskey) or square-ish \u0026ldquo;sign out\u0026rdquo; button in user menu user profile page has \u0026ldquo;notes\u0026rdquo; / \u0026ldquo;all\u0026rdquo; / \u0026ldquo;including files\u0026rdquo; tabs attachments can be collapsed by default buttons to show/hide all notes with CWs in a conversation one-button \u0026ldquo;like\u0026rdquo; (plus custom reactions on a separate button) animated MFM can be enabled/disabled on each note supports longer alt text pop-up user profiles show if follow requests to the user require approval, have a \u0026ldquo;open remote profile\u0026rdquo; option, and show custom fields (e.`,content:`A (probably comprehensive) list of differences #Big ones #fully federated note editing, you can also see previous versions of edited notes Mastodon-compatible API, including OAuth2 can import your exported posts from Mastodon and most of its forks, Pleroma / Akkoma, Misskey / Firefish and forks, Twitter, Instagram, Facebook, including attachments (threading may not work perfectly, and other people\u0026rsquo;s replies to your posts may not get imported) admins can require approval for new users\u0026rsquo; signups admins can silence users admins can mark all of a user\u0026rsquo;s media as NSFW GDPR-style Data Subject Access Requests (users can export all data related to themselves) Fun ones #can play module / tracker music files (federated) listenbrainz integration (federated) background image on user profiles \u0026ldquo;speak as cat\u0026rdquo; separate from \u0026ldquo;is a cat\u0026rdquo; (both setting are federated with compatible software) UI/UX #option to open a note\u0026rsquo;s detailed view by clicking on the note (most useful on mobile) images lacking alt text are marked as such UI elements can be round (as in Misskey) or square-ish \u0026ldquo;sign out\u0026rdquo; button in user menu user profile page has \u0026ldquo;notes\u0026rdquo; / \u0026ldquo;all\u0026rdquo; / \u0026ldquo;including files\u0026rdquo; tabs attachments can be collapsed by default buttons to show/hide all notes with CWs in a conversation one-button \u0026ldquo;like\u0026rdquo; (plus custom reactions on a separate button) animated MFM can be enabled/disabled on each note supports longer alt text pop-up user profiles show if follow requests to the user require approval, have a \u0026ldquo;open remote profile\u0026rdquo; option, and show custom fields (e.g. the user\u0026rsquo;s website address) MFM cheatsheet when composing notes emoji auto-complete is case-insensitive it\u0026rsquo;s always clear if a note has a poll (misskey sometimes hides that) boosts and quote-boost are accounted separately only 1 boost per note per user is allowed admins can remove bots from \u0026ldquo;trending\u0026rdquo; users can hide bots from their timelines translatable notes are shown translated regardless of where they\u0026rsquo;re shown (e.g. when quoted, or when looking at their replies) when searching, users can restrict results to notes with attachments CSS class names are human-readable, to simplify browser-side customisation users can disable indexing of their notes (the setting is federated) \u0026ldquo;likes\u0026rdquo; and \u0026ldquo;reactions\u0026rdquo; federate correctly to Mastodon / Pleroma / Akkoma (Misskey sends them all as reactions) different error icons users can disable the \u0026ldquo;disconnected\u0026rdquo; warning (connection is usually re-established automatically, so the warning is rarely useful) users can set a default emoji for their likes/reactions when the instance is using meilisearch to index notes, Sharkey will use it in more cases (e.g. when limiting results to notes containing images) when showing a reply containing many mentions, they are shortened Ones of interest to admins #quote-boosts federate correctly from/to Mastodon forks the not-very-functional \u0026ldquo;automatically mark attachments as NSFW\u0026rdquo; has been removed (smaller installation, faster image/video uploads) argon2 instead of bcrypt for hashing users\u0026rsquo; secrets admins can delete remote emojis admins can disable achievements admins can refresh remote user details admins can set a default emoji for likes/reactions the PWA icon matches the instance icon `}),e.add({id:5,href:"/docs/",title:"Docs",description:"Docs.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()